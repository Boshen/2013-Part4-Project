Source/AdditivePC.cpp:	for (StarLink* link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/AlgorithmB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/AlgorithmB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/AlgorithmB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/DAGraphB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/DAGraphB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/DAGraphB.cpp:	for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/NonAdditivePC.cpp:	for (StarLink* link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/ObjectManager.cpp:		//	throw Error("Unexpected path-based algorithm type");
Source/ODSet.cpp:	if (path->getCurrCost() < _minDist) _minDist = path->getCurrCost();
Source/ODSet.cpp:		path->print();
Source/ODSet.cpp:		path->setCurrCost(dist);
Source/ODSet.cpp:		path->setCurrCost(minDist);
Source/ODSet.cpp:			path->addLinkToPath(link);
Source/ODSet.cpp:		path->setPrevFlow(path->getFlow());
Source/ODSet.cpp:        path->print();
Source/ODSet.cpp:		for (StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/ODSet.cpp:		for (StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/ODSet.cpp:			flow = link->getFlow() - path->getPrevFlow();
Source/ODSet.cpp:		for (StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/ODSet.cpp:			flow = path->getFlow();
Source/ODSetWithStep.cpp:	// project path-based direction on links
Source/ODSetWithStep.cpp:		for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/OnePathDerivative.cpp:	for (StarLink* link = path->beginLink(); link != NULL; link = path->getNextLink()) {
Source/PathBasedFlowMove.h:		// to iterate through path-based direction
Source/PathBasedFlowMoveWithStep.cpp:		path->setFlow(path->getFlow() + alpha * it->getDirectionValue());
Source/Path.h:		void setPrevFlow(FPType prevFlow); // is used only in path-based algos
Source/Utils.cpp:		for(StarLink *link = path->beginLink(); link != NULL; link = path->getNextLink()){
Source/Utils.cpp:				totalFlow += path->getFlow();
Source/Utils.cpp:	for(StarLink * currLink = path->beginLink(); currLink != NULL; currLink = path->getNextLink()) {
