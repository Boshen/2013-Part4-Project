\relax 
\citation{Sheffi}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Implementation Details}{14}{chapter.3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:implementation}{{3}{14}{Implementation Details\relax }{chapter.3}{}}
\@writefile{tdo}{\contentsline {todo}{{this chapter has to be more formal, it is too colloquial at the moment. And I am not sure but some of the content.}}{14}{section*.32}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Graph Storage}{14}{section.3.1}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Priority Queue Implementations}{14}{section.3.2}}
\@writefile{tdo}{\contentsline {todo}{{we can also use std::set, which uses binary search tree and provides $O(log(n))$ search and keeps minimum element on top of the tree}}{14}{section*.33}}
\citation{BoostHeap}
\@writefile{lot}{\contentsline {table}{\numberline {3.1}{\ignorespaces C++ Boost Heap Implementations with Comparison of Amortized Complexity\relax }}{15}{table.caption.34}}
\newlabel{table:heaps}{{3.1}{15}{C++ Boost Heap Implementations with Comparison of Amortized Complexity\relax \relax }{table.caption.34}{}}
\@writefile{tdo}{\contentsline {todo}{{this is going to be hard to find a good reference, all reports are from Stackoverflow.com}}{15}{section*.35}}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Memory Management}{16}{section.3.3}}
\@writefile{tdo}{\contentsline {todo}{{haven't implemented this, but will be}}{16}{section*.36}}
\@writefile{tdo}{\contentsline {todo}{{also haven't implemented}}{16}{section*.37}}
\@writefile{tdo}{\contentsline {todo}{{Code generation of block move (memcpy) and block set (memset) was rewritten. GCC can now pick the best algorithm (loop, unrolled loop, instruction with rep prefix or a library call) based on the size of the block being copied and the CPU being optimized for. - \url  {http://gcc.gnu.org/gcc-4.3/changes.html}}}{16}{section*.38}}
\@writefile{tdo}{\contentsline {todo}{{talk about using the OOP factory pattern to provide different shortest path algorithms to the TA solver in run time instead of compile time?}}{16}{section*.39}}
\@writefile{tdo}{\contentsline {todo}{{talk about using C++ template to give a generic algorithm for the Boost Heaps? So instead of writing 6 similar algorithms we just write a generic one.}}{16}{section*.40}}
\@setckpt{./contents/chapter3}{
\setcounter{page}{17}
\setcounter{equation}{0}
\setcounter{enumi}{0}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{nag@c}{46}
\setcounter{part}{0}
\setcounter{chapter}{3}
\setcounter{section}{3}
\setcounter{subsection}{0}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{0}
\setcounter{table}{1}
\setcounter{NAT@ctr}{0}
\setcounter{float@type}{16}
\setcounter{FBl@b}{0}
\setcounter{FRobj}{0}
\setcounter{FRsobj}{0}
\setcounter{FBcnt}{0}
\setcounter{@pps}{0}
\setcounter{@ppsavesec}{0}
\setcounter{@ppsaveapp}{0}
\setcounter{ContinuedFloat}{0}
\setcounter{subfigure}{0}
\setcounter{subtable}{0}
\setcounter{parentequation}{0}
\setcounter{lstnumber}{1}
\setcounter{algorithm}{3}
\setcounter{ALG@line}{4}
\setcounter{ALG@rem}{0}
\setcounter{ALG@nested}{0}
\setcounter{ALG@Lnr}{2}
\setcounter{ALG@blocknr}{10}
\setcounter{ALG@storecount}{0}
\setcounter{ALG@tmpcounter}{0}
\setcounter{Item}{0}
\setcounter{Hfootnote}{0}
\setcounter{@todonotes@numberoftodonotes}{31}
\setcounter{lstlisting}{0}
\setcounter{section@level}{0}
}
