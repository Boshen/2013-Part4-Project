12/03
1. Arranged first meeting with Andrea and Olga on 9am 13/03/13.

13/03 meeting
1. Met Andrea and Olga at 9am
2. Talked about the bigger goal of the project and my objectives
3. Been given a brief lecture on the traffic assignment problem and the non-linear cost functions on generating an equilibrium network

18/03
1. Received Code

21/03 meeting
1. explained Forward Star (StarNetwork) and detailed implemation of the code
2. Added Heap.h, RadixHeap.cpp, RadixHeap.h to source file from http://www.cosc.canterbury.ac.nz/tad.takaoka/alg/spalgs/spalgs.html
3. Started coding Dijkstra with RadixHeap

26/03
1. A*: we need euclidean distance but some of the networks doesnt have co-ordinates
2. Bidirectional: using data structures creates too much overhead, 
    makes it slow compared to the current sequencelist, 
    but sequence is not a priority queue, 
    how do we find the stopping criteria?
3. is cost function different between s to t and t to s. (yes..)

28/03
1. for a star: precalculate costs and don't add it to _nodelist.dist (preprocess)
2. for bidirectional, what to do with directed path (current data all undirected)

29/03
1. have to reimplement bidirectional to find the best path .. but how ..

4/04 meeting
1. we can implement a backward star, using composition to point at a network star, then implement bidirectional
3. precalculate the distance matrix for A* estimate cost function, either euclidean or the initial link flows calculated
4. start preparing/recording results of different outputs

11/04/ meeting
1. for the traffic assignment, different models are built, they are used to compare which is better (faster),
the models can be used for predicting the future for what ever scenarios,
if we can make calculating shortet paths faster, that means we can predict furthur in the future.
2. reconstructing path need to skip zone nodes ...

16/04/
1. astar using initial flow as heurstic estimate doesn't improve the run time,
    although it improves the finding of the best path by a small amount.

18/04/ meeting
1. plot shortest path tree for Astar and Dijkstra and compare
2. speed up Bidirectional by looping through it smartly, check only scanned nodes and go only way
3. plot pushes and pops against distance between nodes
4. any thing we can do to get a better heuristic? use the objective function for prediction? prvious flow?

20/04
1. use volatile, register?
2. use namespace?
3. clean up code .. keep on style for pointer *, & use etc

26/04
1. idea: have the tree already there in constructor, 
    keep using decrease key and rebalancing the tree instead of rebuilding it.
    http://stackoverflow.com/questions/9255620/why-does-dijkstras-algorithm-use-decrease-key
     some more advanced algorithms, such as Gabow's Shortest Paths Algorithm, use Dijkstra's algorithm as a subroutine and rely heavily on the decrease-key implementation. They use the fact that if you know the range of valid distances in advance, you can build a super efficient priority queue based on that fact.
2. Multi thread?

04/05
1. preprocess for each iteration - landmarks, reach, 
2. reference like 02-search-Goldberg03tr?
3. for each iteration, can we use the previous iteration result for the heuristic

05/05
1. don't forget to remove code for plotting: (Scanned etc)

Install Boost
wget http://superb-dca2.dl.sourceforge.net/project/boost/boost/1.53.0/boost_1_53_0.tar.bz2
cd /usr/include
(sudo, change /path/to/) tar --bzip2 -xf /path/to/boost_1_53_0.tar.bz2

Multiobjetive astar ?? 

store previous value shortest path , compute value on that path, if path value not changed, return

LPA*, k-level bucket
